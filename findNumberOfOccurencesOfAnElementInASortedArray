
//Count occurences of a number in a sorted array in O(logn) time and O(1) space complexity
#include <iostream>
using namespace std;



int findOccurence(int *arr, int n, int element, bool flag)
{
    int result =-1;
    int low = 0; 
    int high = n-1;
    int mid;
    while(low<=high)
    {
        mid = low+(high-low)/2;
        //in simplest search of an element using Binary Search we stop the search as we find an element
        //but here we will keep on searching the element until we find the elements first/last occurence
        if(arr[mid] == element)
        {
            result = mid;
            //if the flag ==1 we will search left in search for the first occurence
            if(flag == 1) 
            {
                high = mid-1;
            }
            else //if flag is set to 0 e will find the last occurence and go right by setting low = mid+1
            {
                low = mid+1;
            }
        }
        // the following 2 conditions are similar to simple BS as we have to find some occurence of the element
        else if(arr[mid]<element)
        {
            low = mid+1;
        }
        else
        {
            high = mid-1;
        }
    }
    
    return result;
}

int countOccurencesOfANumber(int *arr, int n, int element)
{
    
    int first = findOccurence(arr, n, element, true);
    int last;
    
    //if there is not first occurences that means the element is not present and so simply return 0 as the count
    if(first==-1)
    {
        return 0;
    }
    else
    {
    //find the last occurence if there is first occurence, either the last occurence will be equal to first or not
     last = findOccurence(arr, n, element, false);
    }
    return (last-first+1);
}

int main()
{
    int arr[] = {1,2,3,4,6};
    cout<<countOccurencesOfANumber(arr, sizeof(arr)/sizeof(arr[0]), 5);

    return 0;
}
