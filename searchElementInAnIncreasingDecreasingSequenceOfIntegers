/* This programs takes in an array which has integers in increasing order followed by decreasing order and find a given element 
in O(logn) time. If the element is present then it returns the index of that element else it returns -1 indicating an unsuccessful 
search. Either of the sequences can be absent in the input as well. 
No repetitions in the input are allowed, if repeated then you will get the first occurence of that element only.  */
#include <iostream>

using namespace std;


int search(int* arr, int n, int maxIndex, int element, bool flag)
{
    int low = maxIndex+1;
    int high = n-1;
    int mid;
    if(arr[maxIndex]==element) return maxIndex;
    if (flag)
    {
         low = 0;
         high= maxIndex-1;
    }
    
    while(low<=high)
    {
        mid = low+(high-low)/2;
        if(arr[mid]==element)
        {
            return mid;
        }
        else if(arr[mid]<element)
        {
            if(flag)
            {
                 low=mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
       
        else 
        {
            if(flag)
                high = mid-1;
            else
                low = mid+1;
        }
    }
    return -1;
}

int findMaximumElement(int *arr, int n, int element)
{
    int low = 0; 
    int high = n-1; 
    int mid;
    int next;
    int prev;
    int res = -1;
    while(low<=high)
    {
        mid = low+(high-low)/2;
        prev= (mid-1+n)%n;
        next=(mid+1)%n;
        if(arr[mid]>=arr[prev] && arr[mid]>=arr[next])
         { 
             res= search(arr, n, mid, element, true);
         if(res==-1) res= search(arr, n, mid, element, false);
           return res;
             
         }
        else if(arr[mid]<arr[prev])
        {
            high = mid-1;
        }
        else if(arr[mid]>arr[prev])
        low = mid+1;
    }
    return res;
}

int main()
{
    int arr[] = {-1,-2,-3,-4};
    cout<<findMaximumElement(arr, sizeof(arr)/sizeof(arr[0]) , -1);

    return 0;
}
