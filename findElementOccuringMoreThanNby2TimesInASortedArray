
//Find the element that occurs more than N/2 times in a sorted array having N integers in Log(N) time complexity. Assume these is just one such element or none.
#include <iostream>
using namespace std;

int countOccurence(int *arr, int n, int element, int flag)
{
    int low = 0; int high = n-1;
    int mid;
    int result =-1;
    while(low<=high)
    {
        mid = low+(high-low)/2;
        if(arr[mid]==element)
        {
            result = mid;
            if(flag == 1)
            {
                high = mid-1;
            }
            else
            {
                low = mid+1;
            }
            
        }
        else if(arr[mid]<element)
        low = mid+1;
        else
        {
            high = mid-1;
        }
    }
    return result;
}

int findElementOccuringMoreThanNby2TimesInASortedArray(int *arr, int n)
{ 
//if an element occurs more than N/2 times in a sorted array then it must be present at n/2th location
    
    int first;
    int last;
    int targetOccurences = (n/2)+1;
   
        
       first =  countOccurence(arr, n, arr[n/2], true);
       if(first == -1)
       {
          return -1;
       }
       else
       {
           last =  countOccurence(arr, n, arr[n/2], false);  
       }
       
       if((last-first+1)>=targetOccurences)
       return arr[n/2];
      
    
    return -1;
  
}



int main()
{     
    int arr[] = {1,2,3,4,5,5,5,5,5,5};

   cout<<findElementOccuringMoreThanNby2TimesInASortedArray(arr,sizeof(arr)/sizeof(arr[0]));

    return 0;
}
